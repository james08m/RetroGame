#include "pch.h"
#include "CInventory.h"

////////////////////////////////////////////////////////////
// Constructeur
////////////////////////////////////////////////////////////
CInventory::CInventory()
{
	SetCurrency(0);
	_Objects.reserve(INVENTORY_SPACE);
}

////////////////////////////////////////////////////////////
// Get amount of (money/gold/currency)
////////////////////////////////////////////////////////////
int CInventory::GetCurrency() const
{
	return _Currency;
}

////////////////////////////////////////////////////////////
// Get amount of (money/gold/currency)
////////////////////////////////////////////////////////////
void CInventory::SetCurrency(int amount)
{
	_Currency = amount;
}

////////////////////////////////////////////////////////////
// Get number of objects in the vector
////////////////////////////////////////////////////////////
int CInventory::GetNbObjects() const
{
	return _Objects.size();
}

////////////////////////////////////////////////////////////
// Get number of empty place in inventory
////////////////////////////////////////////////////////////
int CInventory::GetNbEmpty() const
{
	return INVENTORY_SPACE - _Objects.size();
}

////////////////////////////////////////////////////////////
// Return an object with is index
////////////////////////////////////////////////////////////
CObject* CInventory::GetObject(int index)
{
	return _Objects[index];
}

////////////////////////////////////////////////////////////
// Add an object in the inventory
////////////////////////////////////////////////////////////
bool CInventory::AddObject(CObject* object)
{
	if (_Objects.size() < INVENTORY_SPACE)
	{
		_Objects.push_back(object);
		return true;
	}
	return false;
}

////////////////////////////////////////////////////////////
// Remove an object from the inventory
////////////////////////////////////////////////////////////
bool CInventory::RemoveObject(CObject* object)
{
	int i = 0;
	for(auto it = _Objects.begin(); it != _Objects.end(); ++it, ++i)
	{
		if (_Objects[i] == object)
		{
			_Objects.erase(it);
			break;
		}
	}
	return true;
}